plugins {
  id 'kotlin-multiplatform' version '1.3.50'
}
repositories {
  google()
  jcenter()
  maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
  mavenCentral()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'

android {
  signingConfigs {
  }
  compileSdkVersion 28
  defaultConfig {
    applicationId 'com.bradchristie.taminationsapp'
    minSdkVersion 16
    targetSdkVersion 28
    versionCode 101
    versionName '1.5.35'  //  Also update sw.js and of course about.html
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }
  productFlavors {
  }
  buildToolsVersion '28.0.3'
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  sourceSets {
    main {
      assets.srcDir('src/assets')
    }
  }
}


dependencies {
  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  implementation 'androidx.recyclerview:recyclerview:1.1.0-beta05'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
  androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
}

kotlin {
  android("android")
  // This is for iPhone emulator
  // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
  iosX64("ios") {
    binaries {
      framework()
    }
  }
  js()
  sourceSets {
    commonMain {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.1'
      }
    }
    commonTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test-common'
        implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
      }
    }
    androidMain {
      dependsOn commonMain
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation project(':pocketsphinx-android-5prealpha-release')
      }
    }
    androidTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test'
        implementation 'org.jetbrains.kotlin:kotlin-test-junit'
      }
    }
    iosMain {
    }
    iosTest {
    }
    jsMain {
      resources.srcDir('src/assets')
      dependencies {
        implementation kotlin('stdlib-js')
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.0.1'
      }
    }
  }
}

// clean.dependsOn cleanAndroidAssets

def webFolder = new File(project.buildDir, "../src/jsMain/web")
def jsCompilations = kotlin.targets.js.compilations

task populateWebFolder(dependsOn: [jsMainClasses]) {
  doLast {
    copy {
      from jsCompilations.main.output
      from kotlin.sourceSets.jsMain.resources.srcDirs
      jsCompilations.test.runtimeDependencyFiles.each {
        if (it.exists() && !it.isDirectory()) {
          from zipTree(it.absolutePath).matching { include '*.js' }
        }
      }
      into webFolder
    }
  }
}

jsJar.dependsOn(populateWebFolder)

task run(type: JavaExec, dependsOn: [jsJar]) {
  main = "sample.SampleJvmKt"
  classpath { [
      kotlin.targets.jvm.compilations.main.output.allOutputs.files,
      configurations.jvmRuntimeClasspath,
  ] }
  args = []
}


// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
  def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
  def target = project.findProperty("kotlin.target") ?: "ios"
  dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

  doLast {
    def srcFile = kotlin.targets."$target".compilations.main.getBinary("FRAMEWORK", buildType)
    def targetDir = getProperty("configuration.build.dir")
    copy {
      from srcFile.parent
      into targetDir
      include 'app.framework/**'
      include 'app.framework.dSYM'
    }
  }
}