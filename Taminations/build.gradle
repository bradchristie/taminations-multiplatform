plugins {
  id 'kotlin-multiplatform' version '1.3.0'
}
repositories {
  google()
  jcenter()
  maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
  mavenCentral()
}

apply plugin: 'com.android.application'
// apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'

android {
  signingConfigs {
  }
  compileSdkVersion 28
  defaultConfig {
    applicationId 'com.bradchristie.taminationsapp'
    minSdkVersion 16
    targetSdkVersion 28
    versionCode 87
    versionName '1.5.18'
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }
  productFlavors {
  }
  buildToolsVersion '28.0.3'
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

//  Copy XML files from common area to Android-specific location
task syncAndroidAssets(type: Sync) {
  from 'src/assets'
  into 'src/main/assets'
}
task cleanAndroidAssets(type: Delete) {
  delete 'src/main/assets'
}
//  Copy XML files from common area to iOS-specific location
task syncIosAssets(type: Sync) {
  from 'src/assets'
  into 'src/iosMain/assets'
}
//  Copy index.html and other misc. files to Javascript build location
task syncJsHtml(type: Copy) {
  from 'src/jsMain/web'
  into 'build/classes/kotlin/js'
}

//  Copy XML files from common area to Javascript build location
task syncJsAssets(type: Sync, dependsOn: syncJsHtml) {
  from 'src/assets'
  into 'build/classes/kotlin/js/assets'
}
task syncAll(dependsOn: [syncAndroidAssets, syncIosAssets, syncJsAssets, syncJsHtml])

dependencies {
  implementation 'com.android.support:appcompat-v7:28.0.0'
  implementation 'com.android.support.constraint:constraint-layout:1.1.3'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {
  targets {
    fromPreset(presets.android, 'android') {
      compilations.all {
        tasks.compileDebugSources.dependsOn syncAndroidAssets
      }
    }
    // This preset is for iPhone emulator
    // Switch here to presets.iosArm64 (or iosArm32) to build library for iPhone device
    fromPreset(presets.iosX64, 'ios') {
      compilations.main.outputKinds('FRAMEWORK')
    }
    fromPreset(presets.js, 'js') {
      compilations.all {
        tasks[compileKotlinTaskName].dependsOn syncJsHtml, syncJsAssets
      }
    }
  }
  sourceSets {
    commonMain {
      resources.srcDir('src/assets')
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.0.1'
      }
    }
    commonTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test-common'
        implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
      }
    }
    androidMain {
      dependsOn commonMain
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation project(':pocketsphinx-android-5prealpha-release')
      }
    }
    androidTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test'
        implementation 'org.jetbrains.kotlin:kotlin-test-junit'
      }
    }
    iosMain {
    }
    iosTest {
    }
    jsMain {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.0.1'
      }
    }
    jsTest {
      dependsOn jsMain
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test-js'
      }
    }
  }
}

clean.dependsOn cleanAndroidAssets

//  The Kotlin JS libraries are needed to run the JS program
//  So here is a task to copy them in.
//  It gets the libs from the dependencies declared for
//  the JS compile (jsMain above).
//  This needs to be defined after the kotlin section as it
//  uses a configuration defined there.
task syncJsLibs(type: Sync) {
  configurations.jsMainImplementation.copy().each { File file ->
    from(zipTree(file.absolutePath), {
      include "*.js"
      exclude "*.meta.js"
    })
  }
  into "build/classes/kotlin/js/lib"
}
//  Hook it into the JS compilation task
jsMainClasses.dependsOn syncJsLibs

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
  def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
  def target = project.findProperty("kotlin.target") ?: "ios"
  dependsOn "link${buildType.toLowerCase().capitalize()}Framework${target.capitalize()}"

  doLast {
    def srcFile = kotlin.targets."$target".compilations.main.getBinary("FRAMEWORK", buildType)
    def targetDir = getProperty("configuration.build.dir")
    copy {
      from srcFile.parent
      into targetDir
      include 'app.framework/**'
      include 'app.framework.dSYM'
    }
  }
}