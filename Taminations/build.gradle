plugins {
    id 'kotlin-multiplatform' version '1.3.0'
}
repositories {
    google()
    jcenter()
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}
apply plugin: 'com.android.application'
// apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'

android {
    signingConfigs {
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId 'com.bradchristie.taminationsapp'
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 82
        versionName '1.5.13'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    productFlavors {
    }
    buildToolsVersion '28.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//  Copy XML files from common area to Android-specific location
task syncAndroidAssets(type: Sync) {
    from 'src/assets'
    into 'src/main/assets'
}
//  Copy XML files from common area to iOS-specific location
task syncIosAssets(type: Sync) {
    from 'src/assets'
    into 'src/iosMain/assets'
}
//  Copy XML files from common area to Javascript build location
task syncJsAssets(type: Sync) {
    from 'src/assets'
    into 'build/classes/kotlin/js/main/assets'
}
//  Copy index.html and other misc. files to Javascript build location
task syncJsHtml(type: Copy) {
    from 'src/jsMain/web'
    into 'build/classes/kotlin/js/main'
}
task syncAll(dependsOn: [syncAndroidAssets,syncIosAssets,syncJsAssets,syncJsHtml])

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'net.sf.jali:jali-cmusphinx:5prealpha'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}


kotlin {
    targets {
        fromPreset(presets.android, 'android')
        // This preset is for iPhone emulator
        // Switch here to presets.iosArm64 (or iosArm32) to build library for iPhone device
        fromPreset(presets.iosX64, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
        fromPreset(presets.js,'js')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
        		implementation 'org.jetbrains.kotlin:kotlin-test-common'
        		implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        androidMain {
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        iosMain {
        }
        iosTest {
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    def target = project.findProperty("kotlin.target") ?: "ios"
    dependsOn "link${buildType.toLowerCase().capitalize()}Framework${target.capitalize()}"

    doLast {
        def srcFile = kotlin.targets."$target".compilations.main.getBinary("FRAMEWORK", buildType)
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}